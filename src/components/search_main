    import React, { Component } from 'react';
    import { Button } from 'office-ui-fabric-react/lib/Button';
    import ReactDOM from 'react-dom';
    import { filterFields } from '../config/constants.js';
    import _ from 'lodash';



    class MainSearch extends Component {
      constructor(props) {
        super(props);

        this.state= {
          filters: {
            "include": {},
            "exclude": {}
          }
        };
  }

    handleChange({ target }) {
      console.log(this.state)
      this.setState({ [target.name]: target.value });

    }

    renderFilter(filterObj, i) {
      return (
        <div className="inputfield" key={i}>
        <input name={filterObj.name} placeholder={filterObj.placeholder} id="field" value={this.state[filterObj.name]} onChange={(t) =>  { this.handleChange(t)}}/>
        <i className="ms-Icon ms-Icon--Add addfield" aria-hidden="true" onClick={ ()=>{this.addFilter(filterObj.name) }}></i>
        <i className="ms-Icon ms-Icon--Remove subtractfield" aria-hidden="true" onClick={ ()=>{this.addFilter(filterObj.name, true) }}></i>
        </div>
      )
    }

      addFilter(fieldName, exclude) {

      let filters = this.state.filters;
      let value = this.state[fieldName]
      if (value != undefined) {
        let type = exclude ? "exclude" : "include"
        if (!(filters[type][fieldName])) {
          filters[type][fieldName] = [value];

        }  else  {
          filters[type][fieldName].push(value);
        }

        var newState = {}
        newState[fieldName] = null;
        newState.filters = filters;
        this.setState(newState);
      }
    }

  removeFilter(fieldName, exclude, index) {
    let type = "include"
    if (exclude) {
      type = "exclude"
    }

    let newState = this.state.filters;
    console.log(newState[type][fieldName])
    newState[type][fieldName].splice(index, 1)
    //aseta stateen uudet filtterit
    this.setState({ filters: newState })
    if (newState[type][fieldName].length < 1) {
      delete newState[type][fieldName]
    }
  }

  clearArray() {
    let filters = {
      "include": {},
      "exclude": {}
    };

    this.setState({ filters: { include: {}, exclude: {} }});
    console.log(filters)
  }



  render() {

  //Tehdään lista kaikista filterFieldeistä. RenderFilter palauttaa arvon mitä tulisi olla.
  let columns = [];
  var inputFields = this.props.filterFields.map(function(obj, i) {
    return columns.push(this.renderFilter(obj, i));
  }.bind(this))

  let filters = this.state.filters;
  console.log(filters)


  return (
    <div>
    {this.props.title}
    <div className="ms-Grid">
      <div className="ms-Grid-row two-column">
        {columns}
        </div>
    </div>

    <div>
      {_.map(filters.include, function(val, name) {
          return <div key={name} id="include"><span><b>{name}</b></span>: <span className='filter-tag include'>{
        val.map((value, i) => {
          return <span key={i} onClick={() => { this.removeFilter(name, false, i) }}>{value}</span>
        })
      }</span></div>
      }, this)}
      {_.map(filters.exclude, function(val, name) {
          return <div key={name} id="exclude"><span><b>{name}</b></span>: <span className='filter-tag exclude'>{
        val.map((value, i) => {
          return <span key={i} onClick={() => { this.removeFilter(name, true, i) }}>{value}</span>
        })
      }</span></div>
      }, this)}
    </div>

    <div className="ms-Grid-row ms-Grid-col ms-u-sm12">
      <div className="ms-Grid-col ms-u-sm12">
          <Button id="search-button">
            Hae
          </Button>
          <Button id="clear-button" onClick={this.clearArray.bind(this)}>
           Tyhjennä
          </Button>
            </div>
            </div>

        </div>

      );
    }
  };



export default MainSearch;
